import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:collection/collection.dart';
import 'package:star_wars_quiz/model/answer.dart';
import 'package:star_wars_quiz/model/answer_with_id.dart';
import 'package:star_wars_quiz/model/question.dart';
import 'package:star_wars_quiz/model/questions_with_id.dart';
import 'package:star_wars_quiz/model/user.dart';
import 'package:star_wars_quiz/model/user_with_id.dart';

class Firestore {
  static Future<void> createUser({
    required User user,
  }) async {
    await FirebaseFirestore.instance.collection('Users').add(user.toJson());
  }

  static Future<List<User>> getUsers() async {
    return (await FirebaseFirestore.instance.collection('Users').get())
        .docs
        .map((item) => User.fromJson(item.data()))
        .toList();
  }

  static Future<List<UserWithId>> getUsersWithId() async {
    return (await FirebaseFirestore.instance.collection('Users').get())
        .docs
        .map((item) => UserWithId(item.id, User.fromJson(item.data())))
        .toList();
  }

  static Future<List<QuestionWithId>> getQuestions() async {
    return (await FirebaseFirestore.instance.collection('Qustions').get())
        .docs
        .map((item) => QuestionWithId(item.id, Question.fromJson(item.data())))
        .toList();
  }

  static Future<List<AnswerWithId>> getAnswers() async {
    return (await FirebaseFirestore.instance.collection('Answers').get())
        .docs
        .map((item) {
      print('AAAAA. item.data(): ${item.data()}');
      return AnswerWithId(
          item.id,
          Answer(
            userId: (item.data()['user_id']
                    as DocumentReference<Map<String, dynamic>>)
                .path
                .split('/')
                .last,
            questionId: (item.data()['question_id']
                    as DocumentReference<Map<String, dynamic>>)
                .path
                .split('/')
                .last,
            correct: item.data()['correct'],
          ));
    }).toList();
  }

  static Future<void> answerQuestion({
    required String questionId,
    required String userId,
    required bool correct,
  }) async {
    final currentAnswers = await getAnswers();
    final existentAnswer = currentAnswers.firstWhereOrNull(
      (answer) =>
          answer.answer.questionId == questionId &&
          answer.answer.userId == userId,
    );
    print('AAAAA. existentAnswer: $existentAnswer');
    if (existentAnswer != null) {
      await FirebaseFirestore.instance
          .collection('Answers')
          .doc(existentAnswer.id)
          .update({'correct': correct});
      return;
    }
    await FirebaseFirestore.instance.collection('Answers').add({
      'question_id': FirebaseFirestore.instance.doc('Qustions/$questionId'),
      'user_id': FirebaseFirestore.instance.doc('Users/$userId'),
      'correct': correct,
    });
  }

//
// // get with custom order
// static Future<List<Car>> getAllEntriesSortedByName(String collection) async {
//   return (await FirebaseFirestore.instance
//       .collection(collection)
//       .orderBy("manufacturer", descending: false)
//       .get())
//       .docs
//       .map((item) => Car.fromMap(item.data()))
//       .toList();
// }
//
// // get with filter
// static Future<List<Car>> getAllEntriesFilteredByPrice(
//     String collection) async {
//   return (await FirebaseFirestore.instance
//       .collection(collection)
//       .where("price", isGreaterThan: 60000)
//       .get())
//       .docs
//       .map((item) => Car.fromMap(item.data()))
//       .toList();
// }
//
// static Future addEntryWithAutogeneratedId(
//     String collection, Map<String, dynamic> data) async {
//   await FirebaseFirestore.instance.collection(collection).add(data);
// }
//
// // updates an existing entry (missing fields won't be touched on update), document must exist
// static Future updateEntryWithId(
//     String collection, String documentId, Map<String, dynamic> data) async {
//   await FirebaseFirestore.instance
//       .collection(collection)
//       .doc(documentId)
//       .update(data);
// }
//
// // adds or updates an existing entry (missing fields will be deleted on update!), document will be created if needed
// static Future addOrUpdateWithId(
//     String collection, String documentId, Map<String, dynamic> data) async {
//   await FirebaseFirestore.instance
//       .collection(collection)
//       .doc(documentId)
//       .set(data);
// }
//
// // deletes the entry with the given document id
// static Future deleteEntry(String collection, String documentId) async {
//   await FirebaseFirestore.instance
//       .collection(collection)
//       .doc(documentId)
//       .delete();
// }
}
